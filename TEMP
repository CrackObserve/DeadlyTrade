336, 48

ImageOverlayForm frmIMGOverlay = new ImageOverlayForm();
        bool bIMGOvelayActivated = false;

        Regex RegExMonsterRemains;
        Regex RegExMonsterRemainsKORMore; // : 몬스터가 (.*)개체 이상 남아있습니다.

        const int WM_MOUSEWHEEL = 0x020A; // newf

                RegExMonsterRemains = new Regex(@": 몬스터 (.*)개체가 남아있습니다."); // : 몬스터 0개체가 남아있습니다.
                RegExMonsterRemainsKORMore = new Regex(@": 몬스터가 (.*)개체 이상 남아있습니다."); // : 몬스터가 50개체 이상 남아있습니다.

                RegExMonsterRemains = new Regex(@": (.*) monsters remain."); // : 3 monsters remain.
                RegExMonsterRemainsKORMore = new Regex(@": 몬스터가 (.*)개체 이상 남아있습니다."); // : 몬스터가 50개체 이상 남아있습니다.        


Match mRemains = RegExMonsterRemains.Match(line);
            if(mRemains.Success)
            {
                string strRemains = "?";

                strRemains = mRemains.Groups[1].ToString();
                if (strRemains.Contains("More")) strRemains = "50+";

                RemainingForm formMonster = new RemainingForm();
                formMonster.lbRemain.Text = strRemains;
                formMonster.Show();
            }

            Match mRemainsKORMore = RegExMonsterRemainsKORMore.Match(line);
            if (mRemainsKORMore.Success)
            {
                string strRemainsMore = "50+";

                RemainingForm formMonster = new RemainingForm();
                formMonster.lbRemain.Text = strRemainsMore;
                formMonster.Show();
            }

// Hot Key
            g_thisH = FindWindow(null, "POExileDirection");
            bool bRetHOT = RegisterHotKey(g_thisH, 2, (uint) fsModifiers.None, (uint)Keys.F2);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 3, (uint)fsModifiers.None, (uint)Keys.F3);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 4, (uint)fsModifiers.None, (uint)Keys.F4);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 6, (uint)fsModifiers.None, (uint)Keys.F6);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 7, (uint)fsModifiers.None, (uint)Keys.F7);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 9, (uint)fsModifiers.None, (uint)Keys.F9);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }
            bRetHOT = RegisterHotKey(g_thisH, 10, (uint)fsModifiers.None, (uint)Keys.F10);
            if (!bRetHOT)
            {
                MSGForm frmMSG = new MSGForm();
                frmMSG.lbMsg.Text = "단축키 설정에 실패하였습니다.\r\n\r\n단축키를 제외한 다른 기능은 정상작동합니다.";
                frmMSG.ShowDialog();
            }



public void IMGOverlayForm_Show_Hide(string strDoShow)
        {
            SetForegroundWindow(handlePOE);
            if (strDoShow == "Y")
            {
                bIMGOvelayActivated = true;
                frmIMGOverlay.Show();
            }
            else if (strDoShow == "N")
            {
                bIMGOvelayActivated = false;
                frmIMGOverlay.Hide();
            }
            else
            {
                if (!bIMGOvelayActivated)
                {
                    bIMGOvelayActivated = true;
                    frmIMGOverlay.Show();
                }
                else
                {
                    bIMGOvelayActivated = false;
                    frmIMGOverlay.Hide();
                }
            }
        }



protected override void WndProc(ref Message m)
        {
            if (m.Msg == 0x0312)
            {
                Keys keyHot = (Keys)(((int)m.LParam >> 16) & 0xFFFF);
                fsModifiers modifier = (fsModifiers)((int)m.LParam & 0xFFFF);
                //MessageBox.Show("HotKey Pressed :" + modifier.ToString() + " " + key.ToString());
                //if ((fsModifiers.Control | fsModifiers.Shift) == modifier && Keys.N == key)
                if (keyHot == Keys.F2)
                {
                    ForceHideOverlay();
                    SetForegroundWindow(handlePOE);
                    Get_Remaining();
                }
                else if (keyHot == Keys.F3)
                {
                    frmIMGOverlay.nButtonNumber = 3;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
                else if (keyHot == Keys.F4)
                {
                    frmIMGOverlay.nButtonNumber = 4;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
                else if (keyHot == Keys.F6)
                {
                    frmIMGOverlay.nButtonNumber = 6;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
                else if (keyHot == Keys.F7)
                {
                    frmIMGOverlay.nButtonNumber = 7;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
                else if (keyHot == Keys.F9)
                {
                    frmIMGOverlay.nButtonNumber = 9;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
                else if (keyHot == Keys.F10)
                {
                    frmIMGOverlay.nButtonNumber = 0;
                    IMGOverlayForm_Show_Hide("DEFAULT");
                }
            }
            else if ((Control.ModifierKeys & Keys.Control) == Keys.Control)
            {
                // CTRL+MouseWheel
                if(m.Msg == WM_MOUSEWHEEL)
                {
                    // MessageBox.Show("HI"); // newf
                }
            }

            base.WndProc(ref m);
        }

        public void Get_Remaining()
        {
            SendKeys.SendWait("{Enter}/remaining{Enter}");
        }

        private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            UnregisterHotKey(g_thisH, 2);
            UnregisterHotKey(g_thisH, 3);
            UnregisterHotKey(g_thisH, 4);
            UnregisterHotKey(g_thisH, 6);
            UnregisterHotKey(g_thisH, 7);
            UnregisterHotKey(g_thisH, 9);
            UnregisterHotKey(g_thisH, 10);
        }



        private void Button1_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 3;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }        

        private void Button2_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 4;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }

        private void Button3_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 6;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }

        private void Button4_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 7;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }

        private void Button5_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 9;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }

        private void Button6_Click(object sender, EventArgs e)
        {
            frmIMGOverlay.nButtonNumber = 0;
            IMGOverlayForm_Show_Hide("DEFAULT");
        }

        private void Button7_Click(object sender, EventArgs e)
        {
            SettingsForm frmSettings = new SettingsForm();
            //frmMsgE1.lbMsg.Text = "패스오브엑자일 환경 파일을 읽을 수 없습니다.\r\n\r\n패스오브엑자일을 한번이라도 실행하신 후\r\n\r\n다시 POE COMPASS를 실행해주세요.";
            frmSettings.Show();
            /*frmIMGOverlay.nButtonNumber = ???;
            IMGOverlayForm_Show_Hide("DEFAULT");*/
        }        


패스오브엑자일 매크로 (애드온) Exile Direction 업데이트! 이용에 어려움이 있으신분들 꼭 보세요.


안녕하세요. 데들리크러쉬 입니다.

Exile Direction UI를 간소화하고 기능 확장을 고려하였습니다.
타 애드온을 병행해서 사용하실 때에도 문제를 최소화하도록 우선 조치하였습니다.

그리고, PC방이나 개인 PC에서 설치 및 구동에 어려움을 겪고 계신 분들을 위해서
몇가지 보완사항을 포함하였습니다.

(
패스오브엑자일 경로 찾기가 어려우신 분들은
https://youtu.be/nGGrboI1rqE 패스오브엑자일 매크로 애드온 경로 설정하기 도움 영상~ ^^ 을
참조해주세요.
)

* 작고 쉽고 편합니다. ^_______^
자세한 내용은 영상 한번 후루룩~ 보시고 바로 사용해보시면 아실거에요.



* 오류 제보나 의견/건의는 언제든 환영합니다.
단, 오류나 문의의 경우 조금은 자세히 설명해주셔야 유추하고 추측해서 답변드리는 입장에서
최대한 가까운 답을 드릴 수 있다는 점 알아주세요.

[ Contact ]

▶ 다운로드 및 상세설명 : https://cafe.naver.com/poekorea/129703

Path of Exile 한국 커뮤니티 : https://cafe.naver.com/poekorea

오류 제보, 문의, 의견 카카오픈톡 (카카오프로필만(=개인정보 없음)) : https://open.kakao.com/o/gylOSztb 패스오브엑자일 DeadlyCrush

https://github.com/DeadlyCrush

https://www.twitch.tv/deadlycrush

https://www.youtube.com/channel/UCRG83nTzKgfIkGEeTU0bmXg
twitter @deadly_crush

▶ 다운로드 및 상세설명 : https://cafe.naver.com/poekorea/129703


#패스오브엑자일 #PathOfExile #매크로 #Macro #애드온 #Addon 
#퀘스트 #액트 #헬퍼 #한글 #다음 #카카오